/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * OpenAPI spec version: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package cl.tinet.devops.metrics.gen.bitbucket.api;

import cl.tinet.devops.metrics.gen.bitbucket.invoker.ApiException;
import cl.tinet.devops.metrics.gen.bitbucket.model.Error;
import cl.tinet.devops.metrics.gen.bitbucket.model.Pullrequest;
import cl.tinet.devops.metrics.gen.bitbucket.model.PaginatedCommitstatuses;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PullrequestsApi
 */
public class PullrequestsApiTest {

    private final PullrequestsApi api = new PullrequestsApi();

    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesUsernameRepoSlugDefaultReviewersGetTest() throws ApiException {
        String username = null;
        String repoSlug = null;
        // api.repositoriesUsernameRepoSlugDefaultReviewersGet(username, repoSlug);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesUsernameRepoSlugDefaultReviewersTargetUsernameDeleteTest() throws ApiException {
        String username = null;
        String targetUsername = null;
        String repoSlug = null;
        // Error response = api.repositoriesUsernameRepoSlugDefaultReviewersTargetUsernameDelete(username, targetUsername, repoSlug);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesUsernameRepoSlugDefaultReviewersTargetUsernameGetTest() throws ApiException {
        String username = null;
        String targetUsername = null;
        String repoSlug = null;
        // Error response = api.repositoriesUsernameRepoSlugDefaultReviewersTargetUsernameGet(username, targetUsername, repoSlug);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesUsernameRepoSlugDefaultReviewersTargetUsernamePutTest() throws ApiException {
        String username = null;
        String targetUsername = null;
        String repoSlug = null;
        // Error response = api.repositoriesUsernameRepoSlugDefaultReviewersTargetUsernamePut(username, targetUsername, repoSlug);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesUsernameRepoSlugPullrequestsActivityGetTest() throws ApiException {
        String username = null;
        String repoSlug = null;
        // Error response = api.repositoriesUsernameRepoSlugPullrequestsActivityGet(username, repoSlug);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesUsernameRepoSlugPullrequestsGetTest() throws ApiException {
        String username = null;
        String repoSlug = null;
        String state = null;
        // Error response = api.repositoriesUsernameRepoSlugPullrequestsGet(username, repoSlug, state);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesUsernameRepoSlugPullrequestsPostTest() throws ApiException {
        String username = null;
        String repoSlug = null;
        Pullrequest body = null;
        // Pullrequest response = api.repositoriesUsernameRepoSlugPullrequestsPost(username, repoSlug, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesUsernameRepoSlugPullrequestsPullRequestIdActivityGetTest() throws ApiException {
        String username = null;
        String pullRequestId = null;
        String repoSlug = null;
        // Error response = api.repositoriesUsernameRepoSlugPullrequestsPullRequestIdActivityGet(username, pullRequestId, repoSlug);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesUsernameRepoSlugPullrequestsPullRequestIdApproveDeleteTest() throws ApiException {
        String username = null;
        String pullRequestId = null;
        String repoSlug = null;
        // Error response = api.repositoriesUsernameRepoSlugPullrequestsPullRequestIdApproveDelete(username, pullRequestId, repoSlug);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesUsernameRepoSlugPullrequestsPullRequestIdApprovePostTest() throws ApiException {
        String username = null;
        String pullRequestId = null;
        String repoSlug = null;
        // Error response = api.repositoriesUsernameRepoSlugPullrequestsPullRequestIdApprovePost(username, pullRequestId, repoSlug);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesUsernameRepoSlugPullrequestsPullRequestIdCommentsCommentIdGetTest() throws ApiException {
        String username = null;
        String pullRequestId = null;
        String commentId = null;
        String repoSlug = null;
        // Error response = api.repositoriesUsernameRepoSlugPullrequestsPullRequestIdCommentsCommentIdGet(username, pullRequestId, commentId, repoSlug);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesUsernameRepoSlugPullrequestsPullRequestIdCommentsGetTest() throws ApiException {
        String username = null;
        String pullRequestId = null;
        String repoSlug = null;
        // Error response = api.repositoriesUsernameRepoSlugPullrequestsPullRequestIdCommentsGet(username, pullRequestId, repoSlug);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesUsernameRepoSlugPullrequestsPullRequestIdCommitsGetTest() throws ApiException {
        String username = null;
        String pullRequestId = null;
        String repoSlug = null;
        // Error response = api.repositoriesUsernameRepoSlugPullrequestsPullRequestIdCommitsGet(username, pullRequestId, repoSlug);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesUsernameRepoSlugPullrequestsPullRequestIdDeclinePostTest() throws ApiException {
        String username = null;
        String pullRequestId = null;
        String repoSlug = null;
        // Pullrequest response = api.repositoriesUsernameRepoSlugPullrequestsPullRequestIdDeclinePost(username, pullRequestId, repoSlug);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesUsernameRepoSlugPullrequestsPullRequestIdDiffGetTest() throws ApiException {
        String username = null;
        String pullRequestId = null;
        String repoSlug = null;
        // Error response = api.repositoriesUsernameRepoSlugPullrequestsPullRequestIdDiffGet(username, pullRequestId, repoSlug);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesUsernameRepoSlugPullrequestsPullRequestIdGetTest() throws ApiException {
        String username = null;
        String pullRequestId = null;
        String repoSlug = null;
        // Pullrequest response = api.repositoriesUsernameRepoSlugPullrequestsPullRequestIdGet(username, pullRequestId, repoSlug);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesUsernameRepoSlugPullrequestsPullRequestIdMergePostTest() throws ApiException {
        String username = null;
        String pullRequestId = null;
        String repoSlug = null;
        // Pullrequest response = api.repositoriesUsernameRepoSlugPullrequestsPullRequestIdMergePost(username, pullRequestId, repoSlug);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesUsernameRepoSlugPullrequestsPullRequestIdPatchGetTest() throws ApiException {
        String username = null;
        String pullRequestId = null;
        String repoSlug = null;
        // Error response = api.repositoriesUsernameRepoSlugPullrequestsPullRequestIdPatchGet(username, pullRequestId, repoSlug);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesUsernameRepoSlugPullrequestsPullRequestIdPutTest() throws ApiException {
        String username = null;
        String pullRequestId = null;
        String repoSlug = null;
        // Error response = api.repositoriesUsernameRepoSlugPullrequestsPullRequestIdPut(username, pullRequestId, repoSlug);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesUsernameRepoSlugPullrequestsPullRequestIdStatusesGetTest() throws ApiException {
        String username = null;
        String pullRequestId = null;
        String repoSlug = null;
        Integer pullRequestId2 = null;
        // PaginatedCommitstatuses response = api.repositoriesUsernameRepoSlugPullrequestsPullRequestIdStatusesGet(username, pullRequestId, repoSlug, pullRequestId2);

        // TODO: test validations
    }
    
}
