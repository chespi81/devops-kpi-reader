/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * OpenAPI spec version: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package cl.tinet.devops.metrics.gen.bitbucket.api;

import cl.tinet.devops.metrics.gen.bitbucket.invoker.ApiException;
import cl.tinet.devops.metrics.gen.bitbucket.model.Error;
import cl.tinet.devops.metrics.gen.bitbucket.model.Participant;
import cl.tinet.devops.metrics.gen.bitbucket.model.Commit;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CommitsApi
 */
public class CommitsApiTest {

    private final CommitsApi api = new CommitsApi();

    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesUsernameRepoSlugCommitNodeApproveDeleteTest() throws ApiException {
        String username = null;
        String node = null;
        String repoSlug = null;
        String node2 = null;
        // api.repositoriesUsernameRepoSlugCommitNodeApproveDelete(username, node, repoSlug, node2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesUsernameRepoSlugCommitNodeApprovePostTest() throws ApiException {
        String username = null;
        String node = null;
        String repoSlug = null;
        String node2 = null;
        // Participant response = api.repositoriesUsernameRepoSlugCommitNodeApprovePost(username, node, repoSlug, node2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesUsernameRepoSlugCommitRevisionGetTest() throws ApiException {
        String username = null;
        String revision = null;
        String repoSlug = null;
        String revision2 = null;
        // Commit response = api.repositoriesUsernameRepoSlugCommitRevisionGet(username, revision, repoSlug, revision2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesUsernameRepoSlugCommitShaCommentsCommentIdGetTest() throws ApiException {
        String username = null;
        String sha = null;
        String commentId = null;
        String repoSlug = null;
        // Error response = api.repositoriesUsernameRepoSlugCommitShaCommentsCommentIdGet(username, sha, commentId, repoSlug);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesUsernameRepoSlugCommitShaCommentsGetTest() throws ApiException {
        String username = null;
        String sha = null;
        String repoSlug = null;
        // Error response = api.repositoriesUsernameRepoSlugCommitShaCommentsGet(username, sha, repoSlug);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesUsernameRepoSlugCommitsGetTest() throws ApiException {
        String username = null;
        String repoSlug = null;
        // Error response = api.repositoriesUsernameRepoSlugCommitsGet(username, repoSlug);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesUsernameRepoSlugCommitsPostTest() throws ApiException {
        String username = null;
        String repoSlug = null;
        // Error response = api.repositoriesUsernameRepoSlugCommitsPost(username, repoSlug);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesUsernameRepoSlugCommitsRevisionGetTest() throws ApiException {
        String username = null;
        String revision = null;
        String repoSlug = null;
        // Error response = api.repositoriesUsernameRepoSlugCommitsRevisionGet(username, revision, repoSlug);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesUsernameRepoSlugCommitsRevisionPostTest() throws ApiException {
        String username = null;
        String revision = null;
        String repoSlug = null;
        // Error response = api.repositoriesUsernameRepoSlugCommitsRevisionPost(username, revision, repoSlug);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesUsernameRepoSlugDiffSpecGetTest() throws ApiException {
        String username = null;
        String spec = null;
        String repoSlug = null;
        Integer context = null;
        String path = null;
        // api.repositoriesUsernameRepoSlugDiffSpecGet(username, spec, repoSlug, context, path);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesUsernameRepoSlugPatchSpecGetTest() throws ApiException {
        String username = null;
        String spec = null;
        String repoSlug = null;
        // api.repositoriesUsernameRepoSlugPatchSpecGet(username, spec, repoSlug);

        // TODO: test validations
    }
    
}
