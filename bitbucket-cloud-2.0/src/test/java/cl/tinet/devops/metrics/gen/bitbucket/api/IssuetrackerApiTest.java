/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * OpenAPI spec version: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package cl.tinet.devops.metrics.gen.bitbucket.api;

import cl.tinet.devops.metrics.gen.bitbucket.invoker.ApiException;
import cl.tinet.devops.metrics.gen.bitbucket.model.Error;
import cl.tinet.devops.metrics.gen.bitbucket.model.Component;
import cl.tinet.devops.metrics.gen.bitbucket.model.PaginatedComponents;
import cl.tinet.devops.metrics.gen.bitbucket.model.PaginatedIssues;
import cl.tinet.devops.metrics.gen.bitbucket.model.PaginatedIssueAttachments;
import cl.tinet.devops.metrics.gen.bitbucket.model.Issue;
import cl.tinet.devops.metrics.gen.bitbucket.model.PaginatedMilestones;
import cl.tinet.devops.metrics.gen.bitbucket.model.Milestone;
import cl.tinet.devops.metrics.gen.bitbucket.model.PaginatedVersions;
import cl.tinet.devops.metrics.gen.bitbucket.model.Version;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for IssuetrackerApi
 */
public class IssuetrackerApiTest {

    private final IssuetrackerApi api = new IssuetrackerApi();

    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesUsernameRepoSlugComponentsComponentIdGetTest() throws ApiException {
        String username = null;
        String componentId = null;
        String repoSlug = null;
        Integer componentId2 = null;
        // Component response = api.repositoriesUsernameRepoSlugComponentsComponentIdGet(username, componentId, repoSlug, componentId2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesUsernameRepoSlugComponentsGetTest() throws ApiException {
        String username = null;
        String repoSlug = null;
        // PaginatedComponents response = api.repositoriesUsernameRepoSlugComponentsGet(username, repoSlug);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesUsernameRepoSlugIssuesGetTest() throws ApiException {
        String username = null;
        String repoSlug = null;
        // PaginatedIssues response = api.repositoriesUsernameRepoSlugIssuesGet(username, repoSlug);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesUsernameRepoSlugIssuesIssueIdAttachmentsGetTest() throws ApiException {
        String username = null;
        String issueId = null;
        String repoSlug = null;
        Integer issueId2 = null;
        // PaginatedIssueAttachments response = api.repositoriesUsernameRepoSlugIssuesIssueIdAttachmentsGet(username, issueId, repoSlug, issueId2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesUsernameRepoSlugIssuesIssueIdAttachmentsPathDeleteTest() throws ApiException {
        String username = null;
        String path = null;
        String issueId = null;
        String repoSlug = null;
        // api.repositoriesUsernameRepoSlugIssuesIssueIdAttachmentsPathDelete(username, path, issueId, repoSlug);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesUsernameRepoSlugIssuesIssueIdAttachmentsPathGetTest() throws ApiException {
        String username = null;
        String path = null;
        String issueId = null;
        String repoSlug = null;
        // api.repositoriesUsernameRepoSlugIssuesIssueIdAttachmentsPathGet(username, path, issueId, repoSlug);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesUsernameRepoSlugIssuesIssueIdAttachmentsPostTest() throws ApiException {
        String username = null;
        String issueId = null;
        String repoSlug = null;
        Integer issueId2 = null;
        // api.repositoriesUsernameRepoSlugIssuesIssueIdAttachmentsPost(username, issueId, repoSlug, issueId2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesUsernameRepoSlugIssuesIssueIdCommentsCommentIdGetTest() throws ApiException {
        String username = null;
        String commentId = null;
        String issueId = null;
        String repoSlug = null;
        // Error response = api.repositoriesUsernameRepoSlugIssuesIssueIdCommentsCommentIdGet(username, commentId, issueId, repoSlug);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesUsernameRepoSlugIssuesIssueIdCommentsGetTest() throws ApiException {
        String username = null;
        String issueId = null;
        String repoSlug = null;
        // Error response = api.repositoriesUsernameRepoSlugIssuesIssueIdCommentsGet(username, issueId, repoSlug);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesUsernameRepoSlugIssuesIssueIdDeleteTest() throws ApiException {
        String username = null;
        String issueId = null;
        String repoSlug = null;
        // Issue response = api.repositoriesUsernameRepoSlugIssuesIssueIdDelete(username, issueId, repoSlug);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesUsernameRepoSlugIssuesIssueIdGetTest() throws ApiException {
        String username = null;
        String issueId = null;
        String repoSlug = null;
        // Issue response = api.repositoriesUsernameRepoSlugIssuesIssueIdGet(username, issueId, repoSlug);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesUsernameRepoSlugIssuesIssueIdVoteDeleteTest() throws ApiException {
        String username = null;
        String issueId = null;
        String repoSlug = null;
        Integer issueId2 = null;
        // Error response = api.repositoriesUsernameRepoSlugIssuesIssueIdVoteDelete(username, issueId, repoSlug, issueId2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesUsernameRepoSlugIssuesIssueIdVoteGetTest() throws ApiException {
        String username = null;
        String issueId = null;
        String repoSlug = null;
        Integer issueId2 = null;
        // Error response = api.repositoriesUsernameRepoSlugIssuesIssueIdVoteGet(username, issueId, repoSlug, issueId2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesUsernameRepoSlugIssuesIssueIdVotePutTest() throws ApiException {
        String username = null;
        String issueId = null;
        String repoSlug = null;
        Integer issueId2 = null;
        // Error response = api.repositoriesUsernameRepoSlugIssuesIssueIdVotePut(username, issueId, repoSlug, issueId2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesUsernameRepoSlugIssuesIssueIdWatchDeleteTest() throws ApiException {
        String username = null;
        String issueId = null;
        String repoSlug = null;
        Integer issueId2 = null;
        // Error response = api.repositoriesUsernameRepoSlugIssuesIssueIdWatchDelete(username, issueId, repoSlug, issueId2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesUsernameRepoSlugIssuesIssueIdWatchGetTest() throws ApiException {
        String username = null;
        String issueId = null;
        String repoSlug = null;
        Integer issueId2 = null;
        // Error response = api.repositoriesUsernameRepoSlugIssuesIssueIdWatchGet(username, issueId, repoSlug, issueId2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesUsernameRepoSlugIssuesIssueIdWatchPutTest() throws ApiException {
        String username = null;
        String issueId = null;
        String repoSlug = null;
        Integer issueId2 = null;
        // Error response = api.repositoriesUsernameRepoSlugIssuesIssueIdWatchPut(username, issueId, repoSlug, issueId2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesUsernameRepoSlugIssuesPostTest() throws ApiException {
        String username = null;
        String repoSlug = null;
        Issue body = null;
        // Issue response = api.repositoriesUsernameRepoSlugIssuesPost(username, repoSlug, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesUsernameRepoSlugMilestonesGetTest() throws ApiException {
        String username = null;
        String repoSlug = null;
        // PaginatedMilestones response = api.repositoriesUsernameRepoSlugMilestonesGet(username, repoSlug);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesUsernameRepoSlugMilestonesMilestoneIdGetTest() throws ApiException {
        String username = null;
        String milestoneId = null;
        String repoSlug = null;
        Integer milestoneId2 = null;
        // Milestone response = api.repositoriesUsernameRepoSlugMilestonesMilestoneIdGet(username, milestoneId, repoSlug, milestoneId2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesUsernameRepoSlugVersionsGetTest() throws ApiException {
        String username = null;
        String repoSlug = null;
        // PaginatedVersions response = api.repositoriesUsernameRepoSlugVersionsGet(username, repoSlug);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesUsernameRepoSlugVersionsVersionIdGetTest() throws ApiException {
        String username = null;
        String versionId = null;
        String repoSlug = null;
        Integer versionId2 = null;
        // Version response = api.repositoriesUsernameRepoSlugVersionsVersionIdGet(username, versionId, repoSlug, versionId2);

        // TODO: test validations
    }
    
}
