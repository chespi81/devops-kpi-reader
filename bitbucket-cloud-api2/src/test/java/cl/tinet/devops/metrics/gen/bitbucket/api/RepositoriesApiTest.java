/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * OpenAPI spec version: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package cl.tinet.devops.metrics.gen.bitbucket.api;

import cl.tinet.devops.metrics.gen.bitbucket.invoker.ApiException;
import cl.tinet.devops.metrics.gen.bitbucket.model.PaginatedRepositories;
import cl.tinet.devops.metrics.gen.bitbucket.model.Error;
import cl.tinet.devops.metrics.gen.bitbucket.model.Commitstatus;
import cl.tinet.devops.metrics.gen.bitbucket.model.PaginatedCommitstatuses;
import cl.tinet.devops.metrics.gen.bitbucket.model.Repository;
import cl.tinet.devops.metrics.gen.bitbucket.model.PaginatedWebhookSubscriptions;
import cl.tinet.devops.metrics.gen.bitbucket.model.WebhookSubscription;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RepositoriesApi
 */
public class RepositoriesApiTest {

    private final RepositoriesApi api = new RepositoriesApi();

    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesGetTest() throws ApiException {
        // PaginatedRepositories response = api.repositoriesGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesUsernameGetTest() throws ApiException {
        String username = null;
        String role = null;
        // PaginatedRepositories response = api.repositoriesUsernameGet(username, role);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesUsernameRepoSlugCommitNodeStatusesBuildKeyGetTest() throws ApiException {
        String username = null;
        String node = null;
        String key = null;
        String repoSlug = null;
        String node2 = null;
        String key2 = null;
        // Commitstatus response = api.repositoriesUsernameRepoSlugCommitNodeStatusesBuildKeyGet(username, node, key, repoSlug, node2, key2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesUsernameRepoSlugCommitNodeStatusesBuildKeyPutTest() throws ApiException {
        String username = null;
        String node = null;
        String key = null;
        String repoSlug = null;
        String node2 = null;
        String key2 = null;
        Commitstatus body = null;
        // Commitstatus response = api.repositoriesUsernameRepoSlugCommitNodeStatusesBuildKeyPut(username, node, key, repoSlug, node2, key2, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesUsernameRepoSlugCommitNodeStatusesBuildPostTest() throws ApiException {
        String username = null;
        String node = null;
        String repoSlug = null;
        String node2 = null;
        String key = null;
        Commitstatus body = null;
        // Commitstatus response = api.repositoriesUsernameRepoSlugCommitNodeStatusesBuildPost(username, node, repoSlug, node2, key, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesUsernameRepoSlugCommitNodeStatusesGetTest() throws ApiException {
        String username = null;
        String node = null;
        String repoSlug = null;
        String node2 = null;
        // PaginatedCommitstatuses response = api.repositoriesUsernameRepoSlugCommitNodeStatusesGet(username, node, repoSlug, node2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesUsernameRepoSlugDeleteTest() throws ApiException {
        String username = null;
        String repoSlug = null;
        // api.repositoriesUsernameRepoSlugDelete(username, repoSlug);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesUsernameRepoSlugForksGetTest() throws ApiException {
        String username = null;
        String repoSlug = null;
        // PaginatedRepositories response = api.repositoriesUsernameRepoSlugForksGet(username, repoSlug);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesUsernameRepoSlugGetTest() throws ApiException {
        String username = null;
        String repoSlug = null;
        // Repository response = api.repositoriesUsernameRepoSlugGet(username, repoSlug);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesUsernameRepoSlugHooksGetTest() throws ApiException {
        String username = null;
        String repoSlug = null;
        // PaginatedWebhookSubscriptions response = api.repositoriesUsernameRepoSlugHooksGet(username, repoSlug);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesUsernameRepoSlugHooksPostTest() throws ApiException {
        String username = null;
        String repoSlug = null;
        // WebhookSubscription response = api.repositoriesUsernameRepoSlugHooksPost(username, repoSlug);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesUsernameRepoSlugHooksUidDeleteTest() throws ApiException {
        String username = null;
        String uid = null;
        String repoSlug = null;
        String uid2 = null;
        // api.repositoriesUsernameRepoSlugHooksUidDelete(username, uid, repoSlug, uid2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesUsernameRepoSlugHooksUidGetTest() throws ApiException {
        String username = null;
        String uid = null;
        String repoSlug = null;
        String uid2 = null;
        // WebhookSubscription response = api.repositoriesUsernameRepoSlugHooksUidGet(username, uid, repoSlug, uid2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesUsernameRepoSlugHooksUidPutTest() throws ApiException {
        String username = null;
        String uid = null;
        String repoSlug = null;
        String uid2 = null;
        // WebhookSubscription response = api.repositoriesUsernameRepoSlugHooksUidPut(username, uid, repoSlug, uid2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesUsernameRepoSlugPostTest() throws ApiException {
        String username = null;
        String repoSlug = null;
        Repository body = null;
        // Repository response = api.repositoriesUsernameRepoSlugPost(username, repoSlug, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesUsernameRepoSlugPullrequestsPullRequestIdStatusesGetTest() throws ApiException {
        String username = null;
        String pullRequestId = null;
        String repoSlug = null;
        Integer pullRequestId2 = null;
        // PaginatedCommitstatuses response = api.repositoriesUsernameRepoSlugPullrequestsPullRequestIdStatusesGet(username, pullRequestId, repoSlug, pullRequestId2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repositoriesUsernameRepoSlugWatchersGetTest() throws ApiException {
        String username = null;
        String repoSlug = null;
        // Error response = api.repositoriesUsernameRepoSlugWatchersGet(username, repoSlug);

        // TODO: test validations
    }
    
}
